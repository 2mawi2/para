# Para-rs justfile - Rust implementation testing



# Run Rust linting with clippy (skeleton-friendly)
lint:
    cargo clippy --all-targets --all-features -- -D clippy::correctness -D clippy::suspicious -W clippy::style -W clippy::complexity -W clippy::perf

# Run Rust formatting check
fmt-check:
    cargo fmt --all -- --check

# Fix Rust formatting
fmt:
    cargo fmt --all

# Run all Rust checks (tests + linting + formatting) - quiet mode
test:
    #!/bin/bash
    set -euo pipefail
    
    # Function to show progress dots
    show_progress() {
        local pid=$1
        local message=$2
        printf "%s" "$message"
        while kill -0 $pid 2>/dev/null; do
            printf "."
            sleep 0.5
        done
        echo ""
    }
    
    echo "🧪 Running Rust tests..."
    
    # Run tests in background and show progress
    cargo test --quiet > /tmp/test_output.txt 2>&1 &
    test_pid=$!
    show_progress $test_pid "   Compiling and testing"
    wait $test_pid
    test_result=$?
    test_output=$(cat /tmp/test_output.txt)
    rm -f /tmp/test_output.txt
    
    if [ $test_result -ne 0 ]; then
        echo "❌ Tests failed!"
        echo "----------------------------------------"
        echo "$test_output"
        exit 1
    fi
    
    # Count test results from the output
    passed_tests=$(echo "$test_output" | grep -o '[0-9]\+ passed' | head -1 || echo "0 passed")
    failed_tests=$(echo "$test_output" | grep -o '[0-9]\+ failed' | head -1 || echo "0 failed")
    echo "✅ Tests: $passed_tests, $failed_tests"
    
    echo "🔍 Running clippy linting..."
    
    # Run clippy in background and show progress
    cargo clippy --all-targets --all-features -- -W clippy::correctness -W clippy::suspicious -W clippy::style -W clippy::complexity -W clippy::perf > /tmp/clippy_output.txt 2>&1 &
    clippy_pid=$!
    show_progress $clippy_pid "   Analyzing code"
    wait $clippy_pid
    clippy_result=$?
    clippy_output=$(cat /tmp/clippy_output.txt)
    rm -f /tmp/clippy_output.txt
    
    # Count warnings and errors from clippy output
    warnings=$(echo "$clippy_output" | grep -c "warning:" || echo "0")
    errors=$(echo "$clippy_output" | grep -c "error:" || echo "0")
    
    # Check if there are actual compilation errors (not warnings promoted to errors)
    if [ $clippy_result -ne 0 ] && echo "$clippy_output" | grep -q "error\[E[0-9]\+\]"; then
        echo "❌ Clippy compilation errors found!"
        echo "----------------------------------------"
        echo "$clippy_output"
        exit 1
    elif [ $warnings -gt 0 ]; then
        echo "⚠️  Clippy: $warnings warnings"
    else
        echo "✅ Clippy: clean"
    fi
    
    echo "📝 Checking formatting..."
    fmt_output=$(cargo fmt --all -- --check 2>&1)
    fmt_result=$?
    if [ $fmt_result -ne 0 ]; then
        echo "❌ Formatting issues found! Run 'just fmt' to fix"
        echo "----------------------------------------"
        echo "$fmt_output"
        exit 1
    fi
    echo "✅ Formatting: clean"
    
    echo ""
    echo "🎉 All checks completed successfully!"

# Run all Rust checks with verbose output
test-verbose:
    cargo test
    just lint
    just fmt-check

# Run legacy bats tests against Rust implementation
test-legacy:
    #!/bin/bash
    set -euo pipefail
    
    echo "▶ Building Rust binary..."
    cargo build
    
    RUST_BINARY_PATH="$(pwd)/target/debug/para"
    
    if [ ! -f "$RUST_BINARY_PATH" ]; then
        echo "❌ Rust binary not found at: $RUST_BINARY_PATH"
        exit 1
    fi
    
    echo "▶ Setting up test environment..."
    
    # Backup original para.sh if it exists
    if [ -f "para.sh" ]; then
        cp para.sh para.sh.bak
    fi
    
    # Create shim that calls the Rust binary via wrapper
    echo "▶ Creating Rust binary shim with legacy wrapper..."
    WRAPPER_PATH="../tests/para-rust-wrapper.sh"
    
    if [ ! -f "$WRAPPER_PATH" ]; then
        echo "❌ Legacy wrapper not found at: $WRAPPER_PATH"
        exit 1
    fi
    
    cat > para.sh << EOF
    #!/bin/sh
    exec "$WRAPPER_PATH" "$RUST_BINARY_PATH" "\$@"
    EOF
    chmod +x para.sh
    
    # Function to cleanup and restore original para.sh
    cleanup() {
        echo "▶ Restoring original para.sh..."
        if [ -f "para.sh.bak" ]; then
            mv para.sh.bak para.sh
        else
            rm -f para.sh
        fi
    }
    
    # Trap cleanup function to ensure restoration
    trap cleanup EXIT
    
    echo "▶ Running legacy bats tests against Rust binary..."
    echo "  Binary: $RUST_BINARY_PATH"
    echo ""
    
    # Run the legacy bats tests
    if command -v bats >/dev/null 2>&1; then
        # Run all bats tests from legacytests directory
        bats legacytests/test_*.bats 2>/dev/null || test_result=$?
    else
        echo "❌ bats not found. Please install bats-core:"
        echo "  macOS: brew install bats-core"
        echo "  Ubuntu: apt-get install bats"
        exit 1
    fi
    
    echo ""
    echo "✅ Legacy test run completed"
    
    # Exit with the test result if there was one
    exit ${test_result:-0}

# Build the Rust binary
build:
    cargo build

# Run the para binary with any arguments, ensuring it's built first
para *ARGS:
    just build
    ./target/debug/para {{ARGS}}

# Alias for 'start' command, forwards all arguments to para
start *ARGS:
    just para start {{ARGS}}