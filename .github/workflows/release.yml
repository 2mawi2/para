name: Release

on:
  push:
    branches:
      - 'release'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even without tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Extract current version
        id: version
        shell: bash
        run: |
          # Extract current version from Cargo.toml
          CURRENT_VERSION=$(grep '^version = ' Cargo.toml | head -1 | sed 's/version = "\(.*\)"/\1/')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

  test:
    name: Test Build
    needs: [extract-version]
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_release != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1.12.0
        with:
          toolchain: stable
          cache: true
          components: clippy, rustfmt
    
      - name: Check formatting
        run: cargo fmt --all -- --check
    
      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
    
      - name: Test build
        run: cargo build --release
      
      - name: Run tests
        run: cargo test --verbose --all-features

  build-artifacts:
    name: Build Release Artifacts
    needs: [test, extract-version]
    if: always() && (needs.test.result == 'skipped' || needs.test.result == 'success')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create source tarball
        run: |
          mkdir -p artifacts
          tar -czf artifacts/para-${{ needs.extract-version.outputs.version }}.tar.gz \
            --exclude='.git*' \
            --exclude='subtrees' \
            --exclude='.para_*' \
            --exclude='target' \
            --exclude='*.tmp' \
            --exclude='.bats_tmp*' \
            .

      - name: Create checksums
        shell: bash
        run: |
          cd artifacts
          sha256sum * > checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/*

  create-release:
    needs: [extract-version, build-artifacts]
    runs-on: ubuntu-latest
    if: always() && needs.build-artifacts.result == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.extract-version.outputs.tag }}
          name: Para ${{ needs.extract-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/*
            LICENSE
            README.md

  update-homebrew:
    needs: [extract-version, build-artifacts, create-release]
    runs-on: ubuntu-latest
    if: always() && needs.build-artifacts.result == 'success' && needs.create-release.result == 'success'
    steps:
      - name: Checkout homebrew tap repository
        uses: actions/checkout@v4
        with:
          repository: 2mawi2/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap
          
      - name: Download release tarball and calculate SHA
        run: |
          curl -L https://github.com/2mawi2/para/archive/refs/tags/${{ needs.extract-version.outputs.tag }}.tar.gz -o para.tar.gz
          SHA256=$(sha256sum para.tar.gz | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          
      - name: Update formula
        run: |
          mkdir -p homebrew-tap/Formula
          cat > homebrew-tap/Formula/para.rb << EOL
          class Para < Formula
            desc "Parallel IDE workflow helper for Git worktrees"
            homepage "https://github.com/2mawi2/para"
            url "https://github.com/2mawi2/para/archive/refs/tags/${{ needs.extract-version.outputs.tag }}.tar.gz"
            sha256 "${SHA256}"
            license "MIT"
          
            depends_on "rust" => :build
          
            def install
              system "cargo", "install", *std_cargo_args
            end
          
            def caveats
              <<~EOS
                To enable shell completion, add this to your shell config:
                
                For bash:
                  echo 'eval "\$(para completion bash)"' >> ~/.bashrc
                
                For zsh:
                  echo 'eval "\$(para completion zsh)"' >> ~/.zshrc
                
                For fish:
                  para completion fish | source
              EOS
            end
          
            test do
              assert_match "para", shell_output("#{bin}/para --version")
              system "#{bin}/para", "--help"
            end
          end
          EOL
          
      - name: Commit and push updated formula
        run: |
          cd homebrew-tap
          git config user.name "GitHub Action"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Formula/para.rb
          # Only commit and push if there are changes
          if git diff --staged --quiet; then
            echo "No changes to Homebrew formula, already up-to-date."
          else
            git commit -m "Update para to ${{ needs.extract-version.outputs.version }}"
            git push
          fi

  increment-version:
    needs: [extract-version, create-release, update-homebrew]
    runs-on: ubuntu-latest
    if: always() && needs.create-release.result == 'success' && needs.update-homebrew.result == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: release

      - name: Increment version
        run: |
          CURRENT_VERSION="${{ needs.extract-version.outputs.version }}"
          echo "Current version: $CURRENT_VERSION"
          
          # Parse version components (assuming semver format)
          if [[ $CURRENT_VERSION =~ ^([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            echo "Error: Cannot parse version $CURRENT_VERSION"
            exit 1
          fi
          
          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Update Cargo.toml
          sed -i "s/^version = \"$CURRENT_VERSION\"/version = \"$NEW_VERSION\"/" Cargo.toml
          
          # Verify the change
          grep "^version = " Cargo.toml

      - name: Commit version increment
        run: |
          git config user.name "GitHub Action"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Cargo.toml
          git commit -m "Increment version to $NEW_VERSION after release"
          git push origin release

      - name: Merge to main
        run: |
          git checkout main
          git merge release --no-ff -m "Merge release branch with version increment"
          git push origin main