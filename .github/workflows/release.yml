name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      force_release:
        description: 'Force a release even without tests'
        required: false
        default: false
        type: boolean

permissions:
  contents: write

jobs:
  check-tests:
    runs-on: macos-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.force_release != 'true'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Install dependencies
        run: |
          brew install shellcheck bats-core shfmt
      
      - name: Run tests
        run: |
          echo "ðŸ§ª Running all para tests before release..."
          shellcheck -e SC1091,SC2086 para.sh install-para.sh lib/*.sh
          shfmt -d -i 2 para.sh install-para.sh lib/*.sh
          bats tests/test_para_units.bats
          bats tests/test_para_prompt_features.bats
          bats tests/test_para_argument_parsing.bats
          bats tests/test_friendly_names.bats
          bats tests/test_para_integration.bats

  extract-version:
    name: Extract Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        
      - name: Extract version from tag
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, use current date/time as version
            VERSION=$(date +%Y.%m.%d-%H%M%S)
            TAG="v$VERSION"
          else
            # Extract from git tag
            TAG=${GITHUB_REF#refs/tags/}
            VERSION=${TAG#v}
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Current version: $VERSION"
          echo "Tag: $TAG"

  build-artifacts:
    name: Build Release Artifacts
    needs: [check-tests, extract-version]
    if: always() && (needs.check-tests.result == 'skipped' || needs.check-tests.result == 'success')
    runs-on: macos-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Create release tarball
        run: |
          mkdir -p artifacts
          tar -czf artifacts/para-${{ needs.extract-version.outputs.version }}.tar.gz \
            --exclude='.git*' \
            --exclude='subtrees' \
            --exclude='.para_*' \
            --exclude='tests/test_*.tmp' \
            --exclude='.bats_tmp*' \
            para.sh install-para.sh lib/ docs/ README.md justfile

      - name: Create checksums
        shell: bash
        run: |
          cd artifacts
          shasum -a 256 * > checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: artifacts/*

  create-release:
    needs: [extract-version, build-artifacts]
    runs-on: ubuntu-latest
    if: always() && needs.build-artifacts.result == 'success'
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release-artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.extract-version.outputs.tag }}
          name: Para ${{ needs.extract-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            release-artifacts/*
            LICENSE
            README.md

  update-homebrew:
    needs: [extract-version, build-artifacts, create-release]
    runs-on: ubuntu-latest
    if: always() && needs.build-artifacts.result == 'success' && needs.create-release.result == 'success'
    steps:
      - name: Checkout homebrew tap repository
        uses: actions/checkout@v4
        with:
          repository: 2mawi2/homebrew-tap
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}
          path: homebrew-tap
          
      - name: Download release tarball and calculate SHA
        run: |
          curl -L https://github.com/2mawi2/para/archive/refs/tags/${{ needs.extract-version.outputs.tag }}.tar.gz -o para.tar.gz
          SHA256=$(sha256sum para.tar.gz | awk '{print $1}')
          echo "SHA256=$SHA256" >> $GITHUB_ENV
          
      - name: Update formula
        run: |
          mkdir -p homebrew-tap/Formula
          cat > homebrew-tap/Formula/para.rb << EOL
          class Para < Formula
            desc "Parallel IDE workflow helper for Git worktrees"
            homepage "https://github.com/2mawi2/para"
            url "https://github.com/2mawi2/para/archive/refs/tags/${{ needs.extract-version.outputs.tag }}.tar.gz"
            sha256 "${SHA256}"
            license "MIT"
            version "${{ needs.extract-version.outputs.version }}"
          
            def install
              # Install the para script and libraries
              libexec.install "para.sh"
              libexec.install "lib"
              
              # Create wrapper script
              (bin/"para").write <<~EOS
                #!/usr/bin/env sh
                exec "#{libexec}/para.sh" "\$@"
              EOS
              
              # Make wrapper executable
              chmod 0755, bin/"para"
            end
          
            test do
              system "#{bin}/para", "--help"
            end
          end
          EOL
          
      - name: Commit and push updated formula
        run: |
          cd homebrew-tap
          git config user.name "GitHub Action"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add Formula/para.rb
          # Only commit and push if there are changes
          if git diff --staged --quiet; then
            echo "No changes to Homebrew formula, already up-to-date."
          else
            git commit -m "Update para to ${{ needs.extract-version.outputs.version }}"
            git push
          fi

  test-homebrew:
    needs: [extract-version, build-artifacts, create-release, update-homebrew]
    runs-on: macos-latest
    if: always() && needs.update-homebrew.result == 'success'
    steps:
      - name: Test Homebrew installation
        run: |
          # Wait a moment for formula to propagate
          sleep 30
          
          # Test the formula works
          brew install --build-from-source 2mawi2/tap/para
          
          # Test that para is available
          which para
          para --help 