name: Claude Auto Review

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

jobs:
  auto-review:
    runs-on: ubuntu-latest
    # Prevent concurrent runs on the same PR to avoid race conditions
    concurrency:
      group: claude-pr-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
      cancel-in-progress: false
    # Only review PRs created by 2mawi2 (skip for manual triggers)
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.user.login == '2mawi2'
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Deduplicate Reviews
        if: github.event.action == 'synchronize'
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Review triggered by synchronize event. Checking for newer commits..."
          
          # Wait 30 seconds for more commits to arrive
          sleep 30
          
          # Check if newer commits exist
          LATEST_SHA=$(gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json headRefOid -q .headRefOid)
          CURRENT_SHA="${{ github.event.pull_request.head.sha }}"
          
          echo "Current commit: $CURRENT_SHA"
          echo "Latest commit:  $LATEST_SHA"
          
          if [ "$LATEST_SHA" != "$CURRENT_SHA" ]; then
            echo "❌ Newer commits exist. Skipping this review to avoid duplicate work."
            exit 0
          fi
          
          echo "✅ This is the latest commit. Proceeding with review."
      
      - name: Skip if PR Assistant is actively working
        if: github.event.action == 'synchronize'
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Double-check if PR Assistant is currently running
          RUNNING=$(gh run list \
            --repo ${{ github.repository }} \
            --workflow="claude-pr-assistant.yml" \
            --status="in_progress" \
            --branch="${{ github.head_ref }}" \
            --limit=1 \
            --json databaseId \
            -q '.[0].databaseId' || echo "")
          
          if [ -n "$RUNNING" ]; then
            echo "❌ PR Assistant is still working (run #$RUNNING). Skipping review."
            exit 0
          fi
          
          echo "✅ PR Assistant is not running. Proceeding with review."
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install dependencies
        run: |
          # Install just command runner
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          
          # Install Rust toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Automatic PR Review
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          timeout_minutes: "60"
          direct_prompt: |
            You are conducting a critical auto-review with iteration tracking. Your job is to find issues that will ACTUALLY cause bugs, not theoretical problems.

            **ITERATION TRACKING:**
            1. Find completed iterations by checking PR comments for patterns:
               - Look for comments containing "Claude finished @2mawi2's task" (PR Assistant completion)
               - These indicate COMPLETED fix attempts 
               - Count these to determine how many fix iterations have been completed
            2. Find requested iterations by checking for `<!-- iteration-count: N -->` markers
               - These indicate fix requests that have been made
            3. LOGIC:
               - completed_iterations = count of "Claude finished" comments from PR Assistant
               - If completed_iterations >= 3: provide final review only (no more auto-triggers)
               - If completed_iterations < 3 AND critical issues found: auto-trigger next iteration
               - next_iteration = completed_iterations + 1
            4. IMPORTANT: Don't count your own "Auto-Review Analysis" comments as iterations
               - Only count PR Assistant completion comments as completed iterations
               - Your trigger comments are requests for the NEXT iteration

            **CRITICAL REVIEW GUIDELINES - Use this systematic 5-step approach:**

            **STEP 1: Requirements Verification (Acceptance Testing)**
            Before any other review, systematically verify requirements:
            - Read the PR title, description, and any clarifying comments
            - **AUTOMATICALLY CHECK LINKED ISSUES**: Look for issue references (e.g., "Fixes #123", "Closes #456") and use mcp__github__get_issue to read the original requirements
            - Compare the code changes against BOTH the PR description AND the original issue requirements
            - If linked issues exist, prioritize their requirements as the authoritative source
            - Check if the code changes actually implement what was asked for in the issue
            - Flag missing or incorrectly implemented requirements from the original issue
            - Supporting changes that enable the main feature are fine; flag only unrelated additions

            **STEP 2: Verify It Actually Works**
            - Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST - if formatting is incorrect, that's a CRITICAL issue (pipeline will FAIL)
            - Run `just test` - if tests fail, that's a critical issue
            - Run `just lint` - if linting fails, that's a critical issue
            - Trace the main execution path and check integration points
            - Focus on direct dependencies and files that import/call the changed code

            **STEP 3: Find Real Bugs (Not Hypothetical Ones)**
            Look for defects that WILL cause failures in normal usage:
            - Functions returning unexpected values, leaving inconsistent state
            - Missing error handling, concurrency issues, resource management problems
            - Logic errors in the main algorithm or workflow
            - Missing tests for bug fixes (every bug fix should have a regression test)
            - Missing tests for new features (all new code should be tested)
            - Dead code annotations: `#[allow(dead_code)]` is FORBIDDEN
            - Unused imports: `#[allow(unused_imports)]` is FORBIDDEN

            **STEP 4: Critical Functionality Issues**
            - Does this code correctly implement its intended functionality?
            - Will this break existing user workflows?
            - Are there data consistency issues?

            **STEP 5: Maintainability Red Flags That Cause Future Bugs**
            Only flag patterns that will actively cause bugs later:
            - Code that lies about what it does (misleading names/interfaces)
            - Hidden side effects or fragile assumptions about external state

            **IGNORE:**
            - Code that works but could be "cleaner"
            - Performance issues without measured proof of problems
            - Complex edge cases requiring multiple unlikely conditions
            - Style issues that linters/formatters would catch
            
            **USE YOUR JUDGMENT:**
            - When uncertain about domain-specific decisions, explain your reasoning
            - Focus on changes that directly impact the user or system reliability
            - Give benefit of the doubt for intentional design choices

            **AUTO-TRIGGER CRITERIA:**
            Only auto-trigger (@claude comment) for these critical issues:
            - Formatting issues (`just fmt-check` OR `cargo fmt --all -- --check` fails) - pipeline WILL reject the PR
            - Test failures or compilation errors
            - Linting issues (`just lint` fails)
            - Missing tests for bug fixes or new features
            - Code with `#[allow(dead_code)]` or `#[allow(unused_imports)]` annotations
            - Missing core requirements from PR description  
            - Bugs that will cause runtime failures or crashes
            - Security vulnerabilities or data corruption risks
            
            For minor issues, provide feedback in review only (no @claude comment).

            **AUTO-TRIGGER FORMAT:**
            If critical issues found AND iteration < 3, create a JSON file at `.github-triggers/auto-trigger.json` with this structure:

            ```json
            {
              "iteration": {N+1},
              "comment": "@claude please fix these critical issues (iteration {N+1}/3):\n\n**Critical Issues Found:**\n\n1. **[Category]** - [Brief description]\n   - Location: [file]:[line]\n   - Problem: [Specific issue]\n   - Fix: [Concrete suggestion]\n\n**Test Status:**\n- [x] Existing tests pass with `just test`\n- [x] Need to add tests for error cases above\n\n<!-- iteration-count: {N+1} -->"
            }
            ```

            IMPORTANT: 
            1. First create the directory: `mkdir -p .github-triggers`
            2. Write this JSON to `.github-triggers/auto-trigger.json` using the Write tool
            3. The GitHub Actions workflow will detect this file and post the comment

            **WORKFLOW:**
            1. Check iteration count in existing comments using mcp__github__get_pull_request_comments
            2. Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST to ensure code formatting is correct (CRITICAL - pipeline enforces this)
               - If formatting fails, this is a CRITICAL issue requiring auto-trigger
            3. Run `just test` to verify functionality
            4. Run `just lint` to check for code quality issues
            5. Search for forbidden annotations: `rg "#\[allow\(dead_code\)\]|#\[allow\(unused_imports\)\]"`
               - If found, this is a CRITICAL issue requiring auto-trigger
            6. STEP 1: Requirements verification:
               - Parse PR for issue references and read linked issues with mcp__github__get_issue
               - Systematically check each requirement from PR description AND original issues
            7. STEPS 2-5: Review using the remaining methodological approaches
            8. If critical issues found (including missing requirements from original issues) AND iteration < 3: auto-trigger with structured comment
            9. If iteration >= 3: provide final review only
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash,mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_comments,mcp__github__get_issue,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github_file_ops__update_claude_comment,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__assign_copilot_to_issue,mcp__github__create_and_submit_pull_request_review,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pending_pull_request_review,mcp__github__create_pull_request,mcp__github__delete_file,mcp__github__delete_pending_pull_request_review,mcp__github__dismiss_notification,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__manage_notification_subscription,mcp__github__manage_repository_notification_subscription,mcp__github__mark_all_notifications_read,mcp__github__push_files,mcp__github__request_copilot_review,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__submit_pending_pull_request_review,mcp__github__update_issue,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,ListMcpResourcesTool,ReadMcpResourceTool"
          disallowed_tools: "mcp__github__create_repository,mcp__github__fork_repository,WebSearch,WebFetch,Bash(reboot),Bash(shutdown),Bash(halt),Bash(poweroff),Bash(init 0),Bash(init 6),Bash(sudo),Bash(su),Bash(doas),Bash(pkexec),Bash(dd),Bash(mkfs),Bash(fdisk),Bash(parted),Bash(format),Bash(chown root),Bash(chmod u+s),Bash(visudo),Bash(usermod),Bash(useradd),Bash(passwd),Bash(nc -l),Bash(netcat -l),Bash(telnet),Bash(rsh),Bash(rlogin),Bash(nmap),Bash(masscan),Bash(iptables),Bash(ip6tables),Bash(nftables),Bash(tcpdump),Bash(wireshark),Bash(tshark),Bash(crontab),Bash(at),Bash(batch),Bash(curl),Bash(wget),Bash(fetch),Bash(lynx),Bash(w3m),Bash(links),Bash(elinks),Bash(httpie),Bash(http),Bash(aria2c),Bash(axel),Bash(scp),Bash(sftp),Bash(rsync),Bash(ftp),Bash(nc),Bash(netcat),Bash(socat),Bash(ssh)"
          
          custom_instructions: |
            You have been granted comprehensive tools for reviewing and testing Rust code:
            
            **CRITICAL: Auto-Trigger Workflow**
            When you find critical issues and need to trigger the PR assistant:
            1. First check existing comments with mcp__github__get_pull_request_comments to find iteration count
            2. Create directory: `mkdir -p .github-triggers` (use Bash tool)
            3. Write your trigger JSON to `.github-triggers/auto-trigger.json` using the Write tool
            4. The workflow will automatically post this as a PR comment
            
            **Testing & Validation (RUN IN THIS ORDER):**
            1. `just fmt-check` OR `cargo fmt --all -- --check` - Verify code formatting (ALWAYS run this FIRST)
               - The GitHub Actions pipeline specifically runs `cargo fmt --all -- --check`
               - If this fails, the PR will be REJECTED by the pipeline
            2. `just test` - Run comprehensive tests
            3. `just lint` - Check for code quality issues with clippy
            
            **Other Commands:**
            - `just test <pattern>` - Test specific modules or functions
            - `just build` - Ensure the code compiles
            - `just status` - Check project status
            
            **Deep Analysis Commands:**
            - `cargo clippy -- -W clippy::all` - Detailed linting
            - `cargo test <module>` - Test specific modules
            - `cargo tree` - Check dependency tree
            - `git blame <file>` - Understand code history
            - `git log --oneline -n 20` - Recent commit history
            - `rg <pattern>` - Fast code searching
            
            **Code Exploration:**
            - Read, Glob, Grep - Navigate and understand the codebase
            - `git diff HEAD~1` - See recent changes
            - `git show <commit>` - Examine specific commits
            
            **ITERATION TRACKING WORKFLOW:**
            1. Use mcp__github__get_pull_request_comments to read ALL existing PR comments
            2. Count completed fix attempts:
               - Search for comments containing "Claude finished @2mawi2's task"
               - Each indicates one completed fix iteration by the PR Assistant
               - completed_count = number of these completion comments
            3. EXAMPLES:
               - No "Claude finished" comments found = 0 completed iterations (this is the first review)
               - Found 1 "Claude finished" comment = 1 completed iteration (reviewing after first fix)
               - Found 2 "Claude finished" comments = 2 completed iterations (reviewing after second fix)
               - Found 3+ "Claude finished" comments = 3+ completed iterations (final review only)
            4. DECISION LOGIC:
               - If completed_count >= 3: provide final review only (no auto-trigger)
               - If completed_count < 3 AND critical issues found: auto-trigger next iteration
               - next_iteration = completed_count + 1
            5. AUTO-TRIGGER FORMAT:
               - Create `.github-triggers/auto-trigger.json`
               - Include: `"iteration": {next_iteration}` and formatted comment with `<!-- iteration-count: {next_iteration} -->`
            
            **CRITICAL REVIEW PROCESS:**
            1. Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST to verify formatting (MUST pass - pipeline enforces this)
               - The GitHub Actions pipeline runs `cargo fmt --all -- --check` and will REJECT unformatted PRs
            2. Run `just test` to ensure the PR doesn't break existing functionality
            3. Run `just lint` to check for code quality issues
            4. **REQUIREMENTS VERIFICATION**: 
               - Parse PR description for issue references (Fixes #N, Closes #N, etc.)
               - Use mcp__github__get_issue to read linked issues for full context
               - Systematically check each requirement from BOTH PR and original issues
            5. **METHODICAL REVIEW**: Apply the 5-step systematic approach focusing on critical issues
            6. Use mcp__github__create_pending_pull_request_review and related tools for inline feedback  
            7. Only auto-trigger if you find critical issues (including formatting issues, missing/incorrect requirements)
            
            **Remember**: Missing or incorrectly implemented requirements from the original issue are critical issues that should trigger fixes!
      
      - name: Post Auto-Trigger Comment if Needed
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Check if Claude created an auto-trigger JSON file
          if [ -f ".github-triggers/auto-trigger.json" ]; then
            echo "Auto-trigger JSON found, posting comment..."
            
            # Extract the comment from JSON
            COMMENT_BODY=$(jq -r '.comment' .github-triggers/auto-trigger.json)
            ITERATION=$(jq -r '.iteration' .github-triggers/auto-trigger.json)
            
            echo "Posting iteration $ITERATION comment..."
            
            # Post the comment to the PR
            gh pr comment ${{ github.event.pull_request.number || github.event.inputs.pr_number }} \
              --body "$COMMENT_BODY" \
              --repo ${{ github.repository }}
            
            echo "Comment posted successfully"
            
            # Clean up the directory
            rm -rf .github-triggers/
          else
            echo "No auto-trigger file found, skipping comment"
          fi