name: Claude Auto Review

on:
  pull_request:
    types: [opened, synchronize]
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to review'
        required: true
        type: string

jobs:
  auto-review:
    runs-on: ubuntu-latest
    # Prevent concurrent runs on the same PR to avoid race conditions
    concurrency:
      group: claude-pr-${{ github.event.pull_request.number || github.event.inputs.pr_number }}
      cancel-in-progress: false
    # Only review PRs created by 2mawi2 (skip for manual triggers)
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.user.login == '2mawi2'
    permissions:
      contents: read
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Wait for PR Assistant to complete
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Check if PR assistant is currently running
          echo "Checking for running PR assistant workflow..."
          
          # Wait up to 5 minutes for any running PR assistant jobs
          for i in {1..30}; do
            RUNNING_JOBS=$(gh run list --workflow="claude-pr-assistant.yml" --status="in_progress" --json "databaseId,headBranch" --jq ".[] | select(.headBranch == \"${{ github.head_ref }}\") | .databaseId" || true)
            
            if [ -z "$RUNNING_JOBS" ]; then
              echo "No PR assistant jobs running, proceeding with review"
              break
            fi
            
            echo "PR assistant job(s) still running: $RUNNING_JOBS"
            echo "Waiting 10 seconds before checking again... ($i/30)"
            sleep 10
          done
          
          # Final check
          RUNNING_JOBS=$(gh run list --workflow="claude-pr-assistant.yml" --status="in_progress" --json "databaseId,headBranch" --jq ".[] | select(.headBranch == \"${{ github.head_ref }}\") | .databaseId" || true)
          if [ ! -z "$RUNNING_JOBS" ]; then
            echo "WARNING: PR assistant still running after 5 minutes, proceeding anyway"
          fi
      
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install dependencies
        run: |
          # Install just command runner
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          
          # Install Rust toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Automatic PR Review
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          timeout_minutes: "60"
          direct_prompt: |
            You are conducting a critical auto-review with iteration tracking. Your job is to find issues that will ACTUALLY cause bugs, not theoretical problems.

            **ITERATION TRACKING:**
            1. Check ONLY PR comments that contain `<!-- iteration-count: N -->` to find current iteration
               - IGNORE the PR description/body - it's not an iteration
               - ONLY count comments with the iteration marker
            2. If no comments with `<!-- iteration-count: N -->` exist, this is the FIRST iteration (iteration 1)
            3. If highest iteration found >= 3: provide final review only, do NOT add @claude comment
            4. If highest iteration found < 3 AND critical issues found: auto-trigger with structured comment
            5. When checking previous iterations, focus on whether issues were actually resolved
            6. IMPORTANT: Wait for any running PR assistant jobs to complete before starting review

            **CRITICAL REVIEW GUIDELINES - Use this systematic 5-step approach:**

            **STEP 1: Requirements Verification (Acceptance Testing)**
            Before any other review, systematically verify requirements:
            - Read the PR title, description, and any clarifying comments
            - **AUTOMATICALLY CHECK LINKED ISSUES**: Look for issue references (e.g., "Fixes #123", "Closes #456") and use mcp__github__get_issue to read the original requirements
            - Compare the code changes against BOTH the PR description AND the original issue requirements
            - If linked issues exist, prioritize their requirements as the authoritative source
            - Check if the code changes actually implement what was asked for in the issue
            - Flag missing or incorrectly implemented requirements from the original issue
            - Supporting changes that enable the main feature are fine; flag only unrelated additions

            **STEP 2: Verify It Actually Works**
            - Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST - if formatting is incorrect, that's a CRITICAL issue (pipeline will FAIL)
            - Run `just test` - if tests fail, that's a critical issue
            - Run `just lint` - if linting fails, that's a critical issue
            - Trace the main execution path and check integration points
            - Focus on direct dependencies and files that import/call the changed code

            **STEP 3: Find Real Bugs (Not Hypothetical Ones)**
            Look for defects that WILL cause failures in normal usage:
            - Functions returning unexpected values, leaving inconsistent state
            - Missing error handling, concurrency issues, resource management problems
            - Logic errors in the main algorithm or workflow
            - Missing tests for bug fixes (every bug fix should have a regression test)
            - Missing tests for new features (all new code should be tested)
            - Dead code annotations: `#[allow(dead_code)]` is FORBIDDEN
            - Unused imports: `#[allow(unused_imports)]` is FORBIDDEN

            **STEP 4: Critical Functionality Issues**
            - Does this code correctly implement its intended functionality?
            - Will this break existing user workflows?
            - Are there data consistency issues?

            **STEP 5: Maintainability Red Flags That Cause Future Bugs**
            Only flag patterns that will actively cause bugs later:
            - Code that lies about what it does (misleading names/interfaces)
            - Hidden side effects or fragile assumptions about external state

            **IGNORE:**
            - Code that works but could be "cleaner"
            - Performance issues without measured proof of problems
            - Complex edge cases requiring multiple unlikely conditions
            - Style issues that linters/formatters would catch
            
            **USE YOUR JUDGMENT:**
            - When uncertain about domain-specific decisions, explain your reasoning
            - Focus on changes that directly impact the user or system reliability
            - Give benefit of the doubt for intentional design choices

            **AUTO-TRIGGER CRITERIA:**
            Only auto-trigger (@claude comment) for these critical issues:
            - Formatting issues (`just fmt-check` OR `cargo fmt --all -- --check` fails) - pipeline WILL reject the PR
            - Test failures or compilation errors
            - Linting issues (`just lint` fails)
            - Missing tests for bug fixes or new features
            - Code with `#[allow(dead_code)]` or `#[allow(unused_imports)]` annotations
            - Missing core requirements from PR description  
            - Bugs that will cause runtime failures or crashes
            - Security vulnerabilities or data corruption risks
            
            For minor issues, provide feedback in review only (no @claude comment).

            **AUTO-TRIGGER FORMAT:**
            If critical issues found AND iteration < 3, create a JSON file at `.github-triggers/auto-trigger.json` with this structure:

            ```json
            {
              "iteration": {N+1},
              "comment": "@claude please fix these critical issues (iteration {N+1}/3):\n\n**Critical Issues Found:**\n\n1. **[Category]** - [Brief description]\n   - Location: [file]:[line]\n   - Problem: [Specific issue]\n   - Fix: [Concrete suggestion]\n\n**Test Status:**\n- [x] Existing tests pass with `just test`\n- [x] Need to add tests for error cases above\n\n<!-- iteration-count: {N+1} -->"
            }
            ```

            IMPORTANT: 
            1. First create the directory: `mkdir -p .github-triggers`
            2. Write this JSON to `.github-triggers/auto-trigger.json` using the Write tool
            3. The GitHub Actions workflow will detect this file and post the comment

            **WORKFLOW:**
            1. Check iteration count in existing comments using mcp__github__get_pull_request_comments
            2. Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST to ensure code formatting is correct (CRITICAL - pipeline enforces this)
               - If formatting fails, this is a CRITICAL issue requiring auto-trigger
            3. Run `just test` to verify functionality
            4. Run `just lint` to check for code quality issues
            5. Search for forbidden annotations: `rg "#\[allow\(dead_code\)\]|#\[allow\(unused_imports\)\]"`
               - If found, this is a CRITICAL issue requiring auto-trigger
            6. STEP 1: Requirements verification:
               - Parse PR for issue references and read linked issues with mcp__github__get_issue
               - Systematically check each requirement from PR description AND original issues
            7. STEPS 2-5: Review using the remaining methodological approaches
            8. If critical issues found (including missing requirements from original issues) AND iteration < 3: auto-trigger with structured comment
            9. If iteration >= 3: provide final review only
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash,mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_comments,mcp__github__get_issue,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github_file_ops__update_claude_comment,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__assign_copilot_to_issue,mcp__github__create_and_submit_pull_request_review,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pending_pull_request_review,mcp__github__create_pull_request,mcp__github__delete_file,mcp__github__delete_pending_pull_request_review,mcp__github__dismiss_notification,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__manage_notification_subscription,mcp__github__manage_repository_notification_subscription,mcp__github__mark_all_notifications_read,mcp__github__push_files,mcp__github__request_copilot_review,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__submit_pending_pull_request_review,mcp__github__update_issue,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,ListMcpResourcesTool,ReadMcpResourceTool"
          
          custom_instructions: |
            You have been granted comprehensive tools for reviewing and testing Rust code:
            
            **CRITICAL: Auto-Trigger Workflow**
            When you find critical issues and need to trigger the PR assistant:
            1. First check existing comments with mcp__github__get_pull_request_comments to find iteration count
            2. Create directory: `mkdir -p .github-triggers` (use Bash tool)
            3. Write your trigger JSON to `.github-triggers/auto-trigger.json` using the Write tool
            4. The workflow will automatically post this as a PR comment
            
            **Testing & Validation (RUN IN THIS ORDER):**
            1. `just fmt-check` OR `cargo fmt --all -- --check` - Verify code formatting (ALWAYS run this FIRST)
               - The GitHub Actions pipeline specifically runs `cargo fmt --all -- --check`
               - If this fails, the PR will be REJECTED by the pipeline
            2. `just test` - Run comprehensive tests
            3. `just lint` - Check for code quality issues with clippy
            
            **Other Commands:**
            - `just test <pattern>` - Test specific modules or functions
            - `just build` - Ensure the code compiles
            - `just status` - Check project status
            
            **Deep Analysis Commands:**
            - `cargo clippy -- -W clippy::all` - Detailed linting
            - `cargo test <module>` - Test specific modules
            - `cargo tree` - Check dependency tree
            - `git blame <file>` - Understand code history
            - `git log --oneline -n 20` - Recent commit history
            - `rg <pattern>` - Fast code searching
            
            **Code Exploration:**
            - Read, Glob, Grep - Navigate and understand the codebase
            - `git diff HEAD~1` - See recent changes
            - `git show <commit>` - Examine specific commits
            
            **ITERATION TRACKING WORKFLOW:**
            1. Use mcp__github__get_pull_request_comments to read ALL existing PR comments
            2. Filter to ONLY comments containing `<!-- iteration-count: N -->` marker
            3. Find the HIGHEST iteration number from these filtered comments
            4. If no such comments exist, current iteration = 1 (first review)
            5. If highest iteration >= 3, provide final review only (no auto-trigger)
            6. If critical issues found AND highest iteration < 3:
               - Next iteration = highest iteration + 1
               - Create `.github-triggers/` directory and write JSON file
               - JSON must include both iteration number and formatted comment
            
            **CRITICAL REVIEW PROCESS:**
            1. Run `just fmt-check` OR `cargo fmt --all -- --check` FIRST to verify formatting (MUST pass - pipeline enforces this)
               - The GitHub Actions pipeline runs `cargo fmt --all -- --check` and will REJECT unformatted PRs
            2. Run `just test` to ensure the PR doesn't break existing functionality
            3. Run `just lint` to check for code quality issues
            4. **REQUIREMENTS VERIFICATION**: 
               - Parse PR description for issue references (Fixes #N, Closes #N, etc.)
               - Use mcp__github__get_issue to read linked issues for full context
               - Systematically check each requirement from BOTH PR and original issues
            5. **METHODICAL REVIEW**: Apply the 5-step systematic approach focusing on critical issues
            6. Use mcp__github__create_pending_pull_request_review and related tools for inline feedback  
            7. Only auto-trigger if you find critical issues (including formatting issues, missing/incorrect requirements)
            
            **Remember**: Missing or incorrectly implemented requirements from the original issue are critical issues that should trigger fixes!
      
      - name: Post Auto-Trigger Comment if Needed
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          # Check if Claude created an auto-trigger JSON file
          if [ -f ".github-triggers/auto-trigger.json" ]; then
            echo "Auto-trigger JSON found, posting comment..."
            
            # Extract the comment from JSON
            COMMENT_BODY=$(jq -r '.comment' .github-triggers/auto-trigger.json)
            ITERATION=$(jq -r '.iteration' .github-triggers/auto-trigger.json)
            
            echo "Posting iteration $ITERATION comment..."
            
            # Post the comment to the PR
            gh pr comment ${{ github.event.pull_request.number || github.event.inputs.pr_number }} \
              --body "$COMMENT_BODY" \
              --repo ${{ github.repository }}
            
            echo "Comment posted successfully"
            
            # Clean up the directory
            rm -rf .github-triggers/
          else
            echo "No auto-trigger file found, skipping comment"
          fi