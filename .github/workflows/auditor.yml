name: Auditor - Technical Debt Analysis

on:
  schedule:
    - cron: '0 5 * * *'  # Nightly at 5 AM UTC
  workflow_dispatch:

jobs:
  analyze-codebase:
    runs-on: ubuntu-latest
    # Only allow 2mawi2 to trigger this workflow
    if: github.actor == '2mawi2'
    permissions:
      contents: read
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Pre-configure Claude tool permissions
        run: |
          mkdir -p /home/runner/.claude
          cat > /home/runner/.claude/settings.json << 'EOF'
          {
            "mcp": {
              "enableAllProjectMcpServers": true
            },
            "permissions": {
              "allowedTools": [
                "Bash", "Edit", "MultiEdit", "Glob", "Grep", "LS", "Read", "Write", "TodoRead", "TodoWrite"
              ]
            }
          }
          EOF

      - name: Analyze codebase for technical debt
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            You are a code auditor tasked with finding technical debt in this Rust codebase.
            
            Please analyze the codebase comprehensively to identify technical debt, including but not limited to:
            - Error handling issues (unwrap, expect, panic)
            - Code duplication
            - Complex functions that need refactoring
            - Missing tests
            - Outdated dependencies
            - Performance bottlenecks
            - Security vulnerabilities
            - Poor naming or unclear code
            - Missing documentation
            - Architectural issues
            
            Use all available tools to:
            1. Explore the codebase structure
            2. Read and analyze code files
            3. Run tests to understand coverage
            4. Check for linting issues
            5. Analyze git history for problematic areas
            
            For each significant technical debt item found:
            1. Write the issue details to a JSON file in the workspace:
               - Create directory: .github-issues/
               - Filename: .github-issues/issue_1.json, issue_2.json, etc.
               - JSON format:
                 {
                   "title": "Clear title describing the problem",
                   "body": "Detailed description including:\n- What the issue is\n- Why it's important to fix\n- Code examples if relevant\n- Suggested approach for fixing",
                   "labels": ["technical-debt"]
                 }
            2. Create the directory first: Use Write tool to create .github-issues/.gitkeep
            3. Then write each issue as a separate JSON file
            
            Create only 1 issue per run to focus on fixing it completely.
            Choose the most critical technical debt issue you find.
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite"
          timeout_minutes: "30"
      
      - name: Create GitHub issues from analysis
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Checking for issues to create..."
          
          # Check if the issues directory exists
          if [ -d ".github-issues" ]; then
            echo "Found issues directory, processing..."
            
            # List files for debugging
            ls -la .github-issues/
            
            # Process each JSON file
            for issue_file in .github-issues/issue_*.json; do
              if [ -f "$issue_file" ]; then
                echo "Processing $issue_file..."
                
                # Display file contents for debugging
                echo "File contents:"
                cat "$issue_file"
                
                # Extract title and body from JSON
                TITLE=$(jq -r '.title' "$issue_file")
                BODY=$(jq -r '.body' "$issue_file")
                
                # Create the issue
                echo "Creating issue: $TITLE"
                ISSUE_URL=$(gh issue create \
                  --title "$TITLE" \
                  --body "$BODY" \
                  --label "technical-debt" \
                  --repo ${{ github.repository }})
                
                echo "Issue created successfully: $ISSUE_URL"
              fi
            done
          else
            echo "No issues directory found - the auditor may not have found any technical debt"
            echo "Current directory contents:"
            ls -la
          fi