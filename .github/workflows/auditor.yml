name: Auditor - Technical Debt Analysis

on:
  schedule:
    - cron: '0 5 * * *'  # Nightly at 5 AM UTC
  workflow_dispatch:

jobs:
  analyze-codebase:
    runs-on: ubuntu-latest
    # Only allow 2mawi2 to trigger this workflow
    if: github.actor == '2mawi2'
    permissions:
      contents: read
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Analyze codebase for technical debt
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            You are a code auditor tasked with finding technical debt in this Rust codebase.
            
            Please analyze the codebase comprehensively to identify technical debt, including but not limited to:
            - Error handling issues (unwrap, expect, panic)
            - Code duplication
            - Complex functions that need refactoring
            - Missing tests
            - Outdated dependencies
            - Performance bottlenecks
            - Security vulnerabilities
            - Poor naming or unclear code
            - Missing documentation
            - Architectural issues
            
            Use all available tools to:
            1. Explore the codebase structure
            2. Read and analyze code files
            3. Run tests to understand coverage
            4. Check for linting issues
            5. Analyze git history for problematic areas
            
            For each significant technical debt item found:
            1. Create a GitHub issue using the gh CLI:
               - Use: gh issue create --title "Title" --body "Description" --label "technical-debt"
               - Clear title describing the problem
               - Detailed description of the issue
               - Why it's important to fix
               - Suggested approach for fixing
               - The label "technical-debt" must be included
            
            Create at most 3 issues per run to avoid overwhelming the team.
            Focus on the most impactful technical debt first.
          allowed_tools: |
            Bash
            Edit
            Read
            Write
            MultiEdit
            Glob
            Grep
            LS
            TodoRead
            TodoWrite
          timeout_minutes: "30"