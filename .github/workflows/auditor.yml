name: Auditor - Technical Debt Analysis

on:
  schedule:
    - cron: '0 8,14,20 * * *'  # Three times daily at 8 AM, 2 PM, and 8 PM UTC
  workflow_dispatch:

jobs:
  analyze-codebase:
    runs-on: ubuntu-latest
    # Only allow 2mawi2 to trigger this workflow
    if: github.actor == '2mawi2'
    permissions:
      contents: read
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Analyze codebase for technical debt
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            You are a code auditor tasked with finding technical debt in this Rust codebase.
            
            Please analyze the codebase comprehensively to identify technical debt, including but not limited to:
            - Error handling issues (unwrap, expect, panic)
            - Code duplication
            - Complex functions that need refactoring
            - Missing tests
            - Outdated dependencies
            - Performance bottlenecks
            - Security vulnerabilities
            - Poor naming or unclear code
            - Missing documentation
            - Architectural issues
            
            Use all available tools to:
            1. Explore the codebase structure
            2. Read and analyze code files
            3. Run tests to understand coverage
            4. Check for linting issues
            5. Analyze git history for problematic areas
            
            For each significant technical debt item found:
            1. Write the issue details to a JSON file in the workspace:
               - Create directory: .github-issues/
               - Filename: .github-issues/issue_1.json, issue_2.json, etc.
               - JSON format:
                 {
                   "title": "Clear title describing the problem",
                   "body": "Detailed description including:\n- What the issue is\n- Why it's important to fix\n- Code examples if relevant\n- Suggested approach for fixing",
                   "labels": ["technical-debt"]
                 }
            2. Create the directory first: Use Write tool to create .github-issues/.gitkeep
            3. Then write each issue as a separate JSON file
            
            Create only 1 issue per run to focus on fixing it completely.
            Choose the most critical technical debt issue you find.
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash(just test),Bash(just test *),Bash(just lint),Bash(just status),Bash(cargo test),Bash(cargo test *),Bash(cargo clippy),Bash(cargo clippy *),Bash(git log),Bash(git log *),Bash(git blame),Bash(git shortlog),Bash(rg),Bash(grep),Bash(find),Bash(wc),Bash(ls),Bash(cat),Bash(head),Bash(tail)"
          timeout_minutes: "30"
          custom_instructions: |
            You have been granted comprehensive tools for analyzing this Rust codebase for technical debt:
            
            **Available Tools Overview:**
            - Edit, Read, Write, MultiEdit - File manipulation and code examination
            - Glob, Grep, LS - File searching and directory navigation
            - TodoRead, TodoWrite - Task tracking (optional for your analysis workflow)
            - Bash commands - Run various analysis and testing commands
            
            **Code Quality Analysis:**
            - `just lint` - Run clippy to find code quality issues and potential bugs
            - `just test` - Run all tests to check coverage and identify untested code
            - `just test <pattern>` - Run specific tests to verify functionality
            - `just status` - Get overall project status and health
            - `cargo clippy -- -W clippy::all` - Detailed linting with all warnings enabled
            - `cargo test --no-run` - List which tests exist without running them
            
            **Technical Debt Pattern Searching:**
            - `rg "unwrap\(\)|expect\("` - Find unsafe error handling that can panic
            - `rg "TODO|FIXME|HACK|XXX"` - Find marked technical debt comments
            - `rg "panic!"` - Find explicit panic calls
            - `rg "clone\(\)" --type rust` - Find potential performance issues from cloning
            - `rg "unsafe"` - Find unsafe code blocks
            - `grep -r "// @" --include="*.rs"` - Find developer annotations
            
            **Code Metrics and History:**
            - `wc -l src/**/*.rs` - Count total lines of code
            - `find . -name "*.rs" -type f | wc -l` - Count number of Rust files
            - `git log --oneline --since="6 months ago" --grep="fix"` - Find recent bug patterns
            - `git log --oneline --grep="revert"` - Find reverted changes indicating problems
            - `git blame <file>` - Identify frequently changed/problematic code
            - `git shortlog -sn --since="3 months ago"` - See contributor activity
            
            **File System Navigation:**
            - `ls -la` - List directory contents
            - `cat <file>` - Read entire files
            - `head -50 <file>` - Preview file beginnings
            - `tail -50 <file>` - Preview file endings
            - Glob patterns like "src/**/*.rs" - Find files by pattern
            - Grep for searching file contents
            
            **Recommended Analysis Workflow:**
            1. Start with `just status` to understand project structure
            2. Run `just lint` to identify immediate code quality issues
            3. Run `just test` to check test coverage
            4. Use `rg` commands to search for specific technical debt patterns
            5. Examine problem areas with Read/Edit tools
            6. Use git history to understand problem evolution
            7. Create detailed issue for the most critical finding
            
            Remember: You're looking for the MOST CRITICAL technical debt that impacts reliability, maintainability, or security.
      
      - name: Create GitHub issues from analysis
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Checking for issues to create..."
          
          # Check if the issues directory exists
          if [ -d ".github-issues" ]; then
            echo "Found issues directory, processing..."
            
            # List files for debugging
            ls -la .github-issues/
            
            # Process each JSON file
            for issue_file in .github-issues/issue_*.json; do
              if [ -f "$issue_file" ]; then
                echo "Processing $issue_file..."
                
                # Display file contents for debugging
                echo "File contents:"
                cat "$issue_file"
                
                # Extract title and body from JSON
                TITLE=$(jq -r '.title' "$issue_file")
                BODY=$(jq -r '.body' "$issue_file")
                
                # Create the issue
                echo "Creating issue: $TITLE"
                ISSUE_URL=$(gh issue create \
                  --title "$TITLE" \
                  --body "$BODY" \
                  --label "technical-debt" \
                  --repo ${{ github.repository }})
                
                echo "Issue created successfully: $ISSUE_URL"
                
                # Extract issue number from URL
                ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -oE '[0-9]+$')
                
                # Add @claude comment to trigger the PR assistant
                echo "Adding @claude comment to issue #$ISSUE_NUMBER..."
                gh issue comment "$ISSUE_NUMBER" \
                  --body "@claude please fix this technical debt issue" \
                  --repo ${{ github.repository }}
                
                echo "@claude comment added successfully"
              fi
            done
          else
            echo "No issues directory found - the auditor may not have found any technical debt"
            echo "Current directory contents:"
            ls -la
          fi