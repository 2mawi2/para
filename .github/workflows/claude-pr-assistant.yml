name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned, labeled]
  pull_request_review:
    types: [submitted]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to work on'
        required: true
        type: string
      auto_create_pr:
        description: 'Auto-create PR after fixing issue'
        required: false
        type: boolean
        default: true

jobs:
  claude-code-action:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude') && (github.event.comment.user.login == '2mawi2' || github.event.comment.user.login == 'app/github-actions')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude') && github.event.comment.user.login == '2mawi2') ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude') && github.event.review.user.login == '2mawi2') ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || github.event.action == 'labeled') && github.event.issue.user.login == '2mawi2') ||
        (github.event_name == 'workflow_dispatch')
      )
    runs-on: ubuntu-latest
    # Concurrency control to prevent race conditions
    # - For PRs: use same group as auto-review (claude-pr-NUMBER)
    # - For issues: use separate group (claude-issue-NUMBER)
    concurrency:
      group: |
        ${{ 
          github.event.pull_request && format('claude-pr-{0}', github.event.pull_request.number) ||
          github.event.issue.pull_request && format('claude-pr-{0}', github.event.issue.number) ||
          format('claude-issue-{0}', github.event.issue.number)
        }}
      cancel-in-progress: false
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Install dependencies
        run: |
          # Install just command runner
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          
          # Install Rust toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run Claude PR Action
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          timeout_minutes: "60"
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash,mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github_file_ops__update_claude_comment,mcp__github__add_issue_comment,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__assign_copilot_to_issue,mcp__github__create_and_submit_pull_request_review,mcp__github__create_branch,mcp__github__create_issue,mcp__github__create_or_update_file,mcp__github__create_pending_pull_request_review,mcp__github__create_pull_request,mcp__github__create_repository,mcp__github__delete_file,mcp__github__delete_pending_pull_request_review,mcp__github__dismiss_notification,mcp__github__fork_repository,mcp__github__get_code_scanning_alert,mcp__github__get_commit,mcp__github__get_file_contents,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__get_me,mcp__github__get_notification_details,mcp__github__get_pull_request,mcp__github__get_pull_request_comments,mcp__github__get_pull_request_diff,mcp__github__get_pull_request_files,mcp__github__get_pull_request_reviews,mcp__github__get_pull_request_status,mcp__github__get_secret_scanning_alert,mcp__github__get_tag,mcp__github__list_branches,mcp__github__list_code_scanning_alerts,mcp__github__list_commits,mcp__github__list_issues,mcp__github__list_notifications,mcp__github__list_pull_requests,mcp__github__list_secret_scanning_alerts,mcp__github__list_tags,mcp__github__manage_notification_subscription,mcp__github__manage_repository_notification_subscription,mcp__github__mark_all_notifications_read,mcp__github__merge_pull_request,mcp__github__push_files,mcp__github__request_copilot_review,mcp__github__search_code,mcp__github__search_issues,mcp__github__search_repositories,mcp__github__search_users,mcp__github__submit_pending_pull_request_review,mcp__github__update_issue,mcp__github__update_pull_request,mcp__github__update_pull_request_branch,ListMcpResourcesTool,ReadMcpResourceTool"
          custom_instructions: |
            You have been granted tools for editing files and running Rust/just commands for testing and validating your changes:

            **AUTOMATIC PR WORKFLOW (ISSUES ONLY):**
            {% if github.event_name == 'issues' or (github.event_name == 'workflow_dispatch' and github.event.inputs.auto_create_pr == 'true') %}
            After successfully completing code changes and ensuring all tests/lints pass:
            1. Use `mcp__github_file_ops__commit_files` to commit your changes with a descriptive message
            2. Use `mcp__github__create_branch` to create a feature branch (format: "fix/issue-{{ github.event.issue.number || github.event.inputs.issue_number }}")
            3. Use `mcp__github__create_pull_request` to automatically create the PR:
               - Title: "Fix #{{ github.event.issue.number || github.event.inputs.issue_number }}: {{ github.event.issue.title }}"
               - Body: Include summary of changes and "Fixes #{{ github.event.issue.number || github.event.inputs.issue_number }}"
               - Base: main branch
               - Head: your created feature branch
            4. Use `mcp__github__add_issue_comment` to link the PR back to the original issue
            5. Create `.github-outputs/created-pr.json` with PR details: `{"html_url": "PR_URL", "number": PR_NUMBER}`
            {% else %}
            You are working within an existing PR context - do NOT create new pull requests.
            {% endif %}
            
            **CRITICAL REQUIREMENTS:**
            ⚠️ The GitHub Actions pipeline will FAIL if tests, lints, or formatting don't pass!
            ⚠️ You MUST ensure ALL of these pass with NO errors before committing:
               1. `just fmt-check` OR `cargo fmt --all -- --check` - MUST pass (no formatting issues)
               2. `just test` - MUST pass (all tests green)
               3. `just lint` - MUST pass (no clippy warnings/errors)
               4. `cargo fmt --all -- --check` - MUST pass (no formatting issues or warnings)
            ⚠️ If ANY of these commands fail, you have NOT completed your task successfully!
            
            **TEST-DRIVEN DEVELOPMENT (SIMPLE RULES):**
            
            **For Bug Fixes:**
            1. Write a test that reproduces the bug (it should FAIL)
            2. Fix the bug
            3. Test should now PASS
            4. No fix without a test!
            
            **For New Features:**
            1. Think through the feature and write comprehensive tests (they should FAIL)
            2. Tests should cover: happy path, error cases, edge cases
            3. Implement the complete feature to make all tests PASS
            4. If you realize you missed a case, add the test before coding it
            
            **For Refactoring:**
            1. Ensure tests exist and PASS before touching any code
            2. If no tests exist, write them first
            3. Refactor
            4. All tests must still PASS
            
            **WHAT TO TEST:**
            - Business logic and algorithms (not UI/hardware)
            - Error cases and edge conditions
            - Public APIs and their contracts
            - Code with cyclomatic complexity
            
            **HOW TO TEST:**
            - Tests must be independent (no shared state)
            - Keep tests simple and focused on one thing
            - If you need many mocks, refactor the code instead
            - Test names should describe what they test
            
            **WHERE TO PUT TESTS:**
            - Unit tests: Same file in `#[cfg(test)] mod tests { ... }`
            - Integration tests: `tests/` directory
            - Test helpers: Extract to reduce duplication
            
            **WORKFLOW:**
            1. Write tests FIRST
            2. Run tests - they should FAIL
            3. Write code to make tests PASS
            4. Delete any code not used by tests
            5. Run `just fmt` OR `cargo fmt` to format code
            6. Run `just fmt-check` OR `cargo fmt --all -- --check` - MUST pass (no formatting issues)
            7. Run `just test` - MUST pass
            8. Run `just lint` - MUST pass
            9. Only then commit
            
            **CRITICAL:**
            - No production code without a failing test first
            - Think about the whole feature, not just one test
            - Avoid writing code that isn't actually used
            - Tests failing? Fix the code, not the test
            - Pipeline will reject if tests or lints fail!

      - name: Link PR to Issue
        if: github.event_name == 'issues' && success()
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          if [ -f ".github-outputs/created-pr.json" ]; then
            PR_URL=$(jq -r '.html_url' .github-outputs/created-pr.json)
            PR_NUMBER=$(jq -r '.number' .github-outputs/created-pr.json)
            ISSUE_NUMBER=${{ github.event.issue.number }}
            echo "🤖 I've created pull request #$PR_NUMBER to address this issue: $PR_URL"
            gh issue comment $ISSUE_NUMBER --body "🤖 I've created pull request #$PR_NUMBER to address this issue: $PR_URL"
            echo "Issue comment posted successfully"
          else
            echo "No PR created, skipping issue comment"
          fi