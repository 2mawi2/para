name: Claude PR Assistant

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude-code-action:
    if: |
      (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude') && (github.event.comment.user.login == '2mawi2' || github.event.comment.user.login == 'app/github-actions')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude') && github.event.comment.user.login == '2mawi2') ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude') && github.event.review.user.login == '2mawi2') ||
        (github.event_name == 'issues' && contains(github.event.issue.body, '@claude') && github.event.issue.user.login == '2mawi2')
      )
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}

      - name: Install dependencies
        run: |
          # Install just command runner
          curl --proto '=https' --tlsv1.2 -sSf https://just.systems/install.sh | bash -s -- --to /usr/local/bin
          
          # Install Rust toolchain
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Run Claude PR Action
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          timeout_minutes: "60"
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash(just test),Bash(just test *),Bash(just test-only),Bash(just test-only *),Bash(just lint),Bash(just fmt),Bash(just fmt-check),Bash(just build),Bash(just build-release),Bash(just run),Bash(just run *),Bash(just clean),Bash(just status),Bash(cargo test),Bash(cargo test *),Bash(cargo build),Bash(cargo build --release),Bash(cargo check),Bash(cargo clippy),Bash(cargo clippy *),Bash(cargo fmt),Bash(cargo fmt --check),Bash(cargo fmt --all -- --check),Bash(cargo run),Bash(cargo run *),Bash(cargo clean),Bash(rustc --version),Bash(rustfmt),Bash(clippy),Bash(git diff),Bash(git diff *),Bash(git log),Bash(git log *),Bash(git status),Bash(git status *),Bash(git show),Bash(git show *),Bash(git branch),Bash(git branch *),Bash(git rev-parse),Bash(git rev-parse *),Bash(git blame),Bash(git blame *),Bash(git fetch),Bash(git fetch *),Bash(git merge),Bash(git merge *),Bash(git add),Bash(git add *),Bash(git commit),Bash(git commit *),Bash(git push),Bash(git push *),Bash(git pull),Bash(git pull *),Bash(git rebase),Bash(git rebase *),Bash(git checkout),Bash(git checkout *),Bash(git reset),Bash(git reset *),Bash(git stash),Bash(git stash *),Bash(echo),Bash(cat),Bash(grep),Bash(rg),Bash(which),Bash(pwd),Bash(ls),Bash(head),Bash(tail),Bash(wc),Bash(jq),mcp__github_file_ops__commit_files,mcp__github_file_ops__delete_files,mcp__github_file_ops__update_claude_comment,mcp__github__create_pending_pull_request_review,mcp__github__add_pull_request_review_comment_to_pending_review,mcp__github__submit_pending_pull_request_review,mcp__github__get_pull_request_diff,mcp__github__add_pull_request_comment,mcp__github__get_pull_request_comments,mcp__github__get_issue"
          custom_instructions: |
            You have been granted tools for editing files and running Rust/just commands for testing and validating your changes:
            
            **CRITICAL REQUIREMENTS:**
            ⚠️ The GitHub Actions pipeline will FAIL if tests, lints, or formatting don't pass!
            ⚠️ You MUST ensure ALL of these pass with NO errors before committing:
               1. `just fmt-check` OR `cargo fmt --all -- --check` - MUST pass (no formatting issues)
               2. `just test` - MUST pass (all tests green)
               3. `just lint` - MUST pass (no clippy warnings/errors)
            ⚠️ If ANY of these commands fail, you have NOT completed your task successfully!
            ⚠️ The pipeline specifically runs `cargo fmt --all -- --check` and will reject unformatted code!
            
            **Testing & Validation Commands (MUST RUN IN THIS ORDER):**
            1. `just fmt-check` OR `cargo fmt --all -- --check` - Check formatting FIRST
               - If this fails, run `just fmt` OR `cargo fmt` to fix formatting
            2. `just test` - Run comprehensive tests - MUST BE GREEN
            3. `just lint` - Run clippy linting - MUST SHOW NO ERRORS
            
            **Other Commands:**
            - `just test <pattern>` - Run specific tests matching a pattern
            - `just build` - Build debug binary
            - `just build-release` - Build optimized release binary
            
            **Cargo Commands (if needed):**
            - `cargo test <pattern>` - Run specific Rust tests
            - `cargo clippy` - Run linting with detailed suggestions
            - `cargo fmt` - Fix formatting issues automatically
            
            **Git Commands:**
            - `git diff`, `git status` - Check your changes
            - `git log`, `git blame` - Investigate code history
            - `git fetch`, `git merge`, `git add`, `git commit`, `git push` - Version control operations
            - `git rebase`, `git checkout`, `git reset`, `git stash` - Advanced git operations
            
            **File Operations:**
            - Edit, Read, Write, MultiEdit - Make code changes
            - Glob, Grep, LS - Search and explore the codebase
            - rg (ripgrep) - Fast pattern searching
            
            **GitHub Integration:**
            - mcp__github_file_ops__commit_files - Commit your changes
            - mcp__github_file_ops__update_claude_comment - Update your comment with progress
            - mcp__github__create_pending_pull_request_review - Create PR reviews
            
            **TEST-DRIVEN DEVELOPMENT (SIMPLE RULES):**
            
            **For Bug Fixes:**
            1. Write a test that reproduces the bug (it should FAIL)
            2. Fix the bug
            3. Test should now PASS
            4. No fix without a test!
            
            **For New Features:**
            1. Think through the feature and write comprehensive tests (they should FAIL)
            2. Tests should cover: happy path, error cases, edge cases
            3. Implement the complete feature to make all tests PASS
            4. If you realize you missed a case, add the test before coding it
            
            **For Refactoring:**
            1. Ensure tests exist and PASS before touching any code
            2. If no tests exist, write them first
            3. Refactor
            4. All tests must still PASS
            
            **WHAT TO TEST:**
            - Business logic and algorithms (not UI/hardware)
            - Error cases and edge conditions
            - Public APIs and their contracts
            - Code with cyclomatic complexity
            
            **HOW TO TEST:**
            - Tests must be independent (no shared state)
            - Keep tests simple and focused on one thing
            - If you need many mocks, refactor the code instead
            - Test names should describe what they test
            
            **WHERE TO PUT TESTS:**
            - Unit tests: Same file in `#[cfg(test)] mod tests { ... }`
            - Integration tests: `tests/` directory
            - Test helpers: Extract to reduce duplication
            
            **WORKFLOW:**
            1. Write tests FIRST
            2. Run tests - they should FAIL
            3. Write code to make tests PASS
            4. Delete any code not used by tests
            5. Run `just fmt` OR `cargo fmt` to format code
            6. Run `just fmt-check` OR `cargo fmt --all -- --check` - MUST pass (no formatting issues)
            7. Run `just test` - MUST pass
            8. Run `just lint` - MUST pass
            9. Only then commit
            
            **CRITICAL:**
            - No production code without a failing test first
            - Think about the whole feature, not just one test
            - Avoid writing code that isn't actually used
            - Tests failing? Fix the code, not the test
            - Pipeline will reject if tests or lints fail!