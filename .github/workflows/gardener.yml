name: Gardener - Technical Debt Analysis

on:
  schedule:
    - cron: '0 9 * * *'  # Once daily at 9 AM UTC
  workflow_dispatch:

jobs:
  analyze-codebase:
    runs-on: ubuntu-latest
    # Only allow 2mawi2 to trigger this workflow
    if: github.actor == '2mawi2'
    permissions:
      contents: read
      issues: write
      id-token: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install just
        uses: extractions/setup-just@v2

      - name: Install and initialize qlty
        run: |
          # Install qlty non-interactively
          curl -sSL https://qlty.sh | bash
          
          # Export qlty path for ALL subsequent steps using GITHUB_PATH
          echo "$HOME/.qlty/bin" >> $GITHUB_PATH
          
          # Also set for current step
          export PATH="$HOME/.qlty/bin:$PATH"
          
          # Ensure .qlty is never committed
          if ! grep -q "^\.qlty/" .gitignore 2>/dev/null; then
            echo ".qlty/" >> .gitignore
          fi
          
          # Initialize qlty if not already done (answer no to both prompts)
          if [ ! -f ".qlty/qlty.toml" ]; then
            printf "n\nn\n" | $HOME/.qlty/bin/qlty init || true
          fi
          
          # Verify qlty is working
          $HOME/.qlty/bin/qlty --version

      - name: Analyze codebase for technical debt
        uses: 2mawi2/claude-code-action-extended@main
        with:
          use_oauth: true
          model: "claude-sonnet-4-20250514"
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          direct_prompt: |
            You are a senior software architect focused on finding technical debt that impacts code maintainability and changeability.
            
            OBJECTIVE: Find real technical debt that makes the codebase hard to change, understand, or extend. Focus on issues that actually slow down development.
            
            SETUP PHASE:
            1. qlty should already be initialized from the workflow setup
            2. If you get "No qlty config found", run: printf "n\nn\n" | qlty init
            3. qlty is available in PATH - just use 'qlty' commands directly
            
            ANALYSIS WORKFLOW:
            1. Run: qlty smells --all --no-snippets
               - Look for "High total complexity" (count > 50)
               - Find "Deeply nested control flow" (level > 4)
               - Identify duplication with high mass scores (mass > 200)
               - Note functions with high complexity (count > 20)
            
            2. Run: qlty metrics --all --sort complexity --limit 20
               - Focus on files with complexity > 50
               - Check for files with > 300 LOC
               - Note classes with LCOM > 1 (indicates low cohesion)
               - Identify files with many functions (> 20)
            
            3. For function-level analysis, use the code smells from step 1
               - The smells report already shows function complexity
               - Look for "High total complexity" in specific functions
               - Cross-reference with the files identified in step 2
               - Read the actual code files to assess function length and parameters
            
            4. Run: qlty metrics --all --max-depth 2
               - Identify modules/directories with high overall complexity
               - Find areas of the codebase that need architectural improvements
            
            PRIORITIZE THESE ISSUES (in order of impact):
            1. Massive code duplication (> 150 lines repeated across files)
            2. God classes/modules (files > 500 LOC with > 20 methods)
            3. Functions with cyclomatic complexity > 20
            4. Deeply nested code (nesting level > 4)
            5. Low cohesion (LCOM > 1) in large classes
            6. Long parameter lists (> 5 parameters)
            
            IGNORE THESE:
            - Simple unwrap() on static data or tests
            - TODO/FIXME comments
            - Performance optimizations
            - Generated code or external dependencies
            - Test files (unless they're > 1000 lines)
            - Minor naming issues
            
            CREATE 3-5 ISSUES:
            - Focus on different types of debt (don't create 5 duplication issues)
            - Prioritize by impact on development velocity
            - Each issue should be actionable with clear refactoring steps
            - CRITICAL: Each issue must be independently solvable without touching the same files
            - Avoid overlapping refactorings - developers should be able to work on all issues in parallel
            - If two issues would require changes to the same file, combine them or choose the higher priority one
            
            TESTABILITY REQUIREMENTS:
            - ONLY create issues for code that can be automatically tested
            - DO NOT create issues for:
              * Configuration files or setup code
              * UI/UX code requiring manual testing
              * Platform-specific code that can't be tested in CI
              * Build scripts or deployment code
            - For each issue, check if the code has existing tests:
              * If YES: Include "Ready for refactoring" in the issue
              * If NO: Issue must start with "Add tests for X before refactoring"
            
            For each issue, create a JSON file in .github-issues/ with:
            - Clear title describing the maintainability problem
            - Detailed body explaining:
              * Current metrics (complexity, LOC, duplication mass, etc.)
              * Test coverage status (existing tests or need to add tests first)
              * If tests needed: Specific test cases to add before refactoring
              * Why this slows down development
              * Concrete refactoring approach (after tests are in place)
              * Expected improvement in metrics
            
            CLEANUP: After analysis, run: rm -rf .qlty/
          allowed_tools: "Edit,Read,Write,MultiEdit,Glob,Grep,LS,TodoRead,TodoWrite,Bash(just test),Bash(just test *),Bash(just lint),Bash(just status),Bash(cargo test),Bash(cargo test *),Bash(cargo clippy),Bash(cargo clippy *),Bash(git log),Bash(git log *),Bash(git blame),Bash(git shortlog),Bash(rg),Bash(grep),Bash(find),Bash(wc),Bash(ls),Bash(cat),Bash(head),Bash(tail),Bash(printf \"n\\nn\\n\" | qlty init),Bash(qlty smells --all --no-snippets),Bash(qlty metrics --all --sort complexity --limit 20),Bash(qlty metrics --all --sort loc --limit 20),Bash(qlty metrics --all --max-depth 2),Bash(qlty metrics --all --max-depth 3),Bash(qlty metrics --functions *),Bash(rm -rf .qlty/),Bash(which qlty),Bash(qlty --version),Bash(echo $PATH),Bash(ls -la .github-issues/),Bash(mkdir -p .github-issues)"
          timeout_minutes: "30"
          custom_instructions: |
            You have been granted comprehensive tools for analyzing codebases for technical debt that impacts maintainability:
            
            **Qlty Code Quality Tools (PRIMARY ANALYSIS TOOLS):**
            - `printf "n\nn\n" | qlty init` - Initialize qlty if needed (answers no to both prompts)
            - `qlty smells --all --no-snippets` - Find duplication, complexity, and code smells
              * Shows: complexity counts, nesting levels, duplication mass scores
              * Example: "High total complexity (count = 79)" or "Found 177 lines of similar code"
            - `qlty metrics --all --sort complexity --limit 20` - List most complex files
              * Shows: classes, functions, fields, cyclomatic complexity, LCOM, LOC
              * Focus on: complexity > 50, LOC > 300, LCOM > 1
            - NOTE: For function-level details, use the smells report and Read tool
              * The smells output includes function-level complexity
              * Use Read tool to examine specific functions directly
            - `qlty metrics --all --max-depth 2` - Module-level complexity analysis
              * Helps identify architectural issues
            - `rm -rf .qlty/` - Clean up qlty files after analysis
            
            **Traditional Analysis Tools:**
            - `just lint` - Run clippy for Rust-specific issues
            - `just test` - Check test coverage
            - `rg` and `grep` - Search for specific patterns
            - `find`, `wc`, `ls` - File system analysis
            - Git commands - History and blame analysis
            
            **File Manipulation:**
            - Edit, Read, Write, MultiEdit - Examine code in detail
            - Glob, Grep, LS - Navigate codebase
            
            **Key Metrics to Focus On:**
            - Complexity > 50 = needs refactoring
            - Functions > 50 lines = violates single responsibility
            - Files > 300 LOC = poor module boundaries
            - Duplication mass > 200 = significant copy-paste
            - LCOM > 1 = low cohesion (unrelated responsibilities)
            - Nesting level > 4 = hard to understand
            
            **Analysis Workflow:**
            1. Initialize qlty first
            2. Use qlty smells to find major issues (includes function-level data)
            3. Use qlty metrics to quantify problems at file level
            4. Use Read tool to examine specific functions in detail
            5. Check test coverage for identified issues (use rg/grep to find test files)
            6. Create 3-5 diverse, high-impact issues that can be automatically tested
            7. Clean up .qlty directory when done
            
            **Test Coverage Requirements:**
            - Use `rg "test.*function_name"` or `grep -r "function_name" src/` to find existing tests
            - Only create issues for code that can be unit tested
            - Skip UI rendering, platform-specific, or configuration code
            - If code lacks tests, the issue MUST require adding tests first
            
            Focus on technical debt that makes code hard to change AND can be safely refactored with automated testing.
      
      - name: Create GitHub issues from analysis
        if: always()
        env:
          GH_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          echo "Checking for issues to create..."
          
          # Check if the issues directory exists
          if [ -d ".github-issues" ]; then
            echo "Found issues directory, processing..."
            
            # List files for debugging
            ls -la .github-issues/
            
            # Process each JSON file - using find to be more explicit
            find .github-issues -name "*.json" -type f | while read issue_file; do
              echo "Processing $issue_file..."
              
              # Display file contents for debugging
              echo "File contents:"
              cat "$issue_file"
              
              # Extract title and body from JSON
              TITLE=$(jq -r '.title' "$issue_file")
              BODY=$(jq -r '.body' "$issue_file")
              
              echo "Extracted title: $TITLE"
              echo "Body length: ${#BODY}"
              
              # Check if title and body are valid
              if [ -n "$TITLE" ] && [ "$TITLE" != "null" ] && [ -n "$BODY" ] && [ "$BODY" != "null" ]; then
                # Create the issue
                echo "Creating issue: $TITLE"
                ISSUE_URL=$(gh issue create \
                  --title "$TITLE" \
                  --body "$BODY" \
                  --label "technical-debt" \
                  --repo ${{ github.repository }})
                
                echo "Issue created successfully: $ISSUE_URL"
                
                # Extract issue number from URL
                ISSUE_NUMBER=$(echo "$ISSUE_URL" | grep -oE '[0-9]+$')
                
                # Add @claude comment to trigger the PR assistant
                echo "Adding @claude comment to issue #$ISSUE_NUMBER..."
                gh issue comment "$ISSUE_NUMBER" \
                  --body "@claude please fix this technical debt issue" \
                  --repo ${{ github.repository }}
                
                echo "@claude comment added successfully"
              else
                echo "Warning: Invalid JSON in $issue_file - skipping"
                echo "Title was: '$TITLE'"
                echo "Body null check: $BODY"
              fi
            done
          else
            echo "No issues directory found - the gardener may not have found any technical debt"
            echo "Current directory contents:"
            ls -la
          fi
      
      - name: Clean up qlty files
        if: always()
        run: |
          echo "Cleaning up qlty files..."
          rm -rf .qlty/ || true
          echo "Cleanup complete"