---
description: 
globs: 
alwaysApply: true
---
# Para - Parallel IDE Workflow Helper

## Project Overview
This project provides a POSIX shell script for creating multiple ephemeral IDE sessions on Git worktrees, enabling parallel development with easy rebase/discard workflow.

**Supports multiple IDEs:** Cursor, Claude Code, VS Code, and extensible for others.

## Key Files
- **[para.sh](mdc:para.sh)** - Main script with clean subcommand interface for parallel session management
- **[justfile](mdc:justfile)** - Development workflow automation with testing, linting, and git hooks
- **[README.md](mdc:README.md)** - Comprehensive documentation with examples and configuration options
- **[install-para.sh](mdc:install-para.sh)** - Universal installer script for global installation
- **[test-file.py](mdc:test-file.py)** - Test file used for development and testing workflows

## Modular Architecture
```
lib/
├── para-config.sh   # Configuration management (IDE-agnostic)
├── para-utils.sh    # Utility functions and validation  
├── para-git.sh      # Git operations and worktree management
├── para-session.sh  # Session lifecycle and state management
└── para-ide.sh      # IDE integration (supports Cursor, Claude Code, VS Code)

tests/
├── test_para.bats   # Main test suite using bats-core
└── README.md          # Testing documentation

scripts/
├── pre-commit         # Git hook for running tests
└── pre-push           # Git hook for running linting
```

## IDE Configuration
The script is now IDE-agnostic and supports multiple editors:

**Claude Code (Recommended for Claude AI users):**
```bash
export IDE_NAME="claude"
export IDE_CMD="claude"
# Note: Claude Code doesn't support --user-data-dir isolation
```

**Cursor (Default):**
```bash
export IDE_NAME="cursor"  # Default
export IDE_CMD="cursor"   # Default
export IDE_USER_DATA_DIR=".cursor-userdata"  # Default
```

**VS Code:**
```bash
export IDE_NAME="code"
export IDE_CMD="code"
export IDE_USER_DATA_DIR=".vscode-userdata"
```

## Development Workflow
- **Setup**: `just dev-setup` - Complete environment setup
- **Testing**: `just test` - Run bats test suite (auto-installs dependencies)
- **Linting**: `just lint` - Run shellcheck + shfmt
- **Formatting**: `just fmt` - Auto-fix shell script formatting
- **Hooks**: `just setup-hooks` - Configure pre-commit/pre-push git hooks
- **Status**: `just status` - Check dependencies and project health

## Core Commands
- `para` - Create new parallel session (opens configured IDE)
- `para rebase "message"` - Auto-stage & rebase session with commit message
- `para list` - Show all active sessions
- `para continue` - Resume after resolving rebase conflicts (auto-stages)
- `para cancel` - Discard current session
- `para clean` - Remove all sessions

## Testing Workflows
**Basic Test:**
```bash
./para.sh                          # Create session
cd subtrees/pc/*/                    # Enter worktree
echo 'test change' >> test-file.py   # Make changes
./para.sh rebase "test commit"      # Auto-stage & rebase
```

**Conflict Test:**
```bash
./para.sh && ./para.sh           # Create 2 sessions
cd subtrees/pc/20*/                  # Session 1: modify same file
echo 'change A' >> test-file.py && ../../../para.sh rebase "A"
cd ../20*/                           # Session 2: conflicting change
echo 'change B' >> test-file.py && ../../../para.sh rebase "B"  # Conflict!
# Edit file to resolve conflicts, then:
./para.sh continue                 # Auto-stages & completes
```

## How It Works
1. **Session Creation**: Creates timestamped branch `pc/YYYYMMDD-HHMMSS` and worktree in `subtrees/`
2. **State Tracking**: Uses `.para_state/` directory to track sessions
3. **Context-Aware**: Auto-detects current session from working directory
4. **Auto-Staging**: Automatically stages all changes during rebase and conflict resolution
5. **Clean Workflow**: No manual `git add` required anywhere
6. **IDE Agnostic**: Works with any IDE that supports command-line launching

## Development Notes
- Pure POSIX shell for maximum compatibility
- Uses Git worktrees for complete isolation
- Context-aware session detection from directory path
- Automatic conflict resolution with staging
- Subcommand interface following CLI best practices
- Automated testing with bats-core framework
- Linting with shellcheck + shfmt for code quality
- Git hooks prevent commits/pushes with issues
- IDE-agnostic design with configurable IDE support
- Backwards compatible with existing Cursor-specific configurations
- When writing integration tests always use 'mktemp -d' to ensure git commands do not interfere with the main repository, or choose an alternative strategy that is non-intrusive
